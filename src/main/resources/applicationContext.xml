<?xml version="1.0" encoding="utf-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">



	<!-- 使用 annotation --> 
	<context:annotation-config />
    
	<bean id="configurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:init.properties</value>
		</property>
	</bean> 
	
	<!-- 系统常量配置 -->
	<bean id="constant" class="com.zufe.utils.Constant">
		<property name="LOGIN_URL" value="${loginURL}"></property>
	</bean>
	
	<!-- 数据源配置 -->
	<bean id="targetDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 其他配置 -->  
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->  
        <property name="initialPoolSize" value="3"></property>  
        <!--连接池中保留的最小连接数。Default: 3 -->  
        <property name="minPoolSize" value="3"></property>  
        <!--连接池中保留的最大连接数。Default: 15 -->  
        <property name="maxPoolSize" value="5"></property>  
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->  
        <property name="acquireIncrement" value="3"></property>  
        <!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->  
        <property name="maxStatements" value="8"></property>  
        <!-- maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->  
        <property name="maxStatementsPerConnection" value="5"></property>  
        <!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->  
        <property name="maxIdleTime" value="1800"></property>
	</bean>
	
	<bean id="dataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg ref="targetDataSource"></constructor-arg>
	</bean>
	
	<!-- 把数据源注入给session工厂 --> 
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<!--  <prop key="hibernate.hbm2ddl.auto">create</prop>-->
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop> 
			</props>
		</property>
		<property name="packagesToScan" value="com.zufe.pojo" />
	</bean>
 
 	<!-- 事务管理器 -->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		  abstract="false" lazy-init="default" autowire="default">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!--
		事务自动扫描 注解模式 <tx:annotation-driven transaction-manager="txManager"
		proxy-target-class="true"/>
	-->

	<!-- 在service层配置事务 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* com.zufe.service.*.*(..))" />
		<aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice" />
	</aop:config>

    <!-- 使用声明式配置事物(事务通知) -->  
    <!--Spring中常用事务类型：  
         REQUIRED       支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。  
         SUPPORTS       支持当前事务，如果当前没有事务，就以非事务方式执行。  
         MANDATORY      支持当前事务，如果当前没有事务，就抛出异常。  
         REQUIRES_NEW   新建事务，如果当前存在事务，把当前事务挂起。  
         NOT_SUPPORTED  以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。  
         NEVER          以非事务方式执行，如果当前存在事务，则抛出异常。      
     -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
 	<!-- activiti5与spring集成配置 -->
 	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
 	 	<property name="dataSource" ref="dataSource" />
 	 	<property name="transactionManager" ref="txManager" />
    	<property name="databaseSchemaUpdate" value="true" />  
    	<property name="jobExecutorActivate" value="false" /> 
    	<property name="customSessionFactories"> 
            <list> 
            	<bean class="com.zufe.activiti.ext.CustomGroupEntityManagerFactory"></bean>
            	<bean class="com.zufe.activiti.ext.CustomUserEntityManagerFactory"></bean>
            </list> 
        </property>
  	</bean>
  	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
	    <property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>
  	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
  	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
  	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
  	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
  	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
  	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
  	<!-- activiti配置结束 -->
  	
  	
	<!--开启Spring的自动扫描 注解模式，检查@Controller, @Service, @Repository注解实现注入-->
	<context:component-scan base-package="com.zufe"/> 
	
	<!-- liquibase配置 -->
	<bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
      <property name="dataSource" ref="targetDataSource" />
      <property name="changeLog" value="classpath:db-changelog.xml" />
      <!--
      contexts specifies the runtime contexts to use.
      -->
      <property name="contexts" value="production" />
 	</bean>
</beans>